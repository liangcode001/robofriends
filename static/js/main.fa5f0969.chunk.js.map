{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorkerRegistration.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","Response","json","users","filteredRobots","filter","toLowerCase","includes","console","log","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fa5f0969.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card =({id,name,email}) =>{\n    return(\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src= {`https://robohash.org/${id}?size=200x200`}/>\n            <h1>{name}</h1>\n            <p>{email}</p>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n\nconst CardList =({robots}) =>{\n    return(\n        <div>\n            { \n            robots.map((user,i) =>{\n             return (<\n                Card key = {i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email}\n            />\n             );\n            })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange})=>{\n    return(\n        <div className = 'pa2'> \n            <input className = 'pa3 ba b--green bg-lightest-blue' \n            type ='search' \n            placeholder = 'search robots'\n            onChange = {searchChange}\n        />\n        </div>\n    )\n}\n\nexport default SearchBox;","const Scroll = (props) => {\n    return (\n        <div style={{overflow:'scroll',border:'1px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import {Component}from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor (props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n//import {robots} from './robots';\nimport SearchBox from '../components/SearchBox'\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n//import { render } from '@testing-library/react';\n\n\n\nclass App extends Component{\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield:''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(Response => Response.json())\n        .then(users => this.setState({robots:users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    \n    }\n\n    render(){\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robots=>{\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        console.log(filteredRobots);\n        return !robots.length? \n        <h1>Loading</h1>:\n        (\n            <div className = 'tc'>\n            <h1 className = 'f2'>Robofriends</h1>\n           <SearchBox searchChange ={this.onSearchChange}/>\n           <Scroll>\n               <ErrorBoundry>\n                   <CardList robots = {filteredRobots}/>\n               </ErrorBoundry>\n\n           </Scroll>\n       </div>\n        );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <App/>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}